name: API_REF

on:
  push:
    branches:
      - main
      - pydoctor

permissions:
  contents: read
  id-token: write
  pages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python 3.12.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.6

      # Step 3: Install Python dependencies
      - name: Install requirements for documentation generation
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install docutils pydoctor

      # Step 4: Generate Python API documentation with PyDoctor
      - name: Generate API documentation with PyDoctor
        run: |
          pydoctor --config=docs/pydoctor.ini src/resonate
        continue-on-error: true # Ignore errors from PyDoctor if any

      # Step 5: Archive the generated documentation for deployment
      - name: Archive artifact
        shell: sh
        run: |
          echo ::group::Archive artifact
          tar \
            --dereference --hard-dereference \
            --directory docs \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .
          echo ::endgroup::

      # Step 6: Upload the artifact for deployment
      - name: Upload artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: ${{ runner.temp }}/artifact.tar
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # Step 7: Deploy to GitHub Pages using the uploaded artifact
      - id: deployment
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
