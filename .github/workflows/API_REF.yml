name: API_REF

on:
  push:
    branches:
      - main
      - pydoctor
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Step 3: Install dependencies using pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pydoctor  # You can add this to your requirements.txt if preferred

      # Step 4: Generate the API documentation using PyDoctor
      - name: Build docs using PyDoctor
        run: |
          pydoctor --config=docs/pydoctor.ini src/resonate

      # Step 5: Archive the generated documentation for GitHub Pages
      - name: Archive artifact
        shell: sh
        run: |
          echo ::group::Archive artifact
          tar \
            --dereference --hard-dereference \
            --directory docs/api \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .
          echo ::endgroup::

      # Step 6: Upload the artifact for later deployment
      - name: Upload artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: ${{ runner.temp }}/artifact.tar
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # Step 7: Deploy to GitHub Pages using the uploaded artifact
      - id: deployment
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
